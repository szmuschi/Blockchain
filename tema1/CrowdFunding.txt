// SPDX-License-Identifier: MIT

pragma solidity >=0.7.0 <0.9.0;

contract DistributeFunding{
    struct recipient{
        string name;
        int share;
        bool withdrawn;
        bool registered;
    }
    uint256 receivedBalance;
    address payable owner;
    int percentage;
    address payable[] recipientAdresses;
    mapping (address => recipient) recipientInfo;
    CrowdFunding crowdFunding;

    constructor() {
        percentage = 0;
        receivedBalance = 0;
    }

    event ValueReceived(uint256 amount);

    function addRecipient(string memory recipientName) public {
        require(recipientInfo[msg.sender].registered == false, "Recipient already registered");
        require(verifyPercentage(recipientInfo[msg.sender].share) == true, "Maximum number of beneficiaries has been reached");
        recipientAdresses.push(payable(msg.sender));
        recipientInfo[msg.sender] = recipient({
            name: recipientName,
            share: 20,
            withdrawn: false,
            registered: true
        });
    }

    function getAmount() public view returns (uint256) {
        return address(this).balance;
    }

    function getAddresses() public view returns (address payable[] memory) {
        return recipientAdresses;
    }

    function verifyPercentage(int percent) private returns (bool) {
        if(percentage + percent <= 100){
            percentage += percent;
            return true;
        }
        return false;
    }

    function withdrawAmount() public payable{
        require(recipientInfo[msg.sender].withdrawn == false, "You can withdraw funds only once");
        uint256 sharedSum;
        sharedSum = uint256((int(receivedBalance) * recipientInfo[msg.sender].share) / 100);
        emit ValueReceived(sharedSum);
        require(address(this).balance > sharedSum, "insufficient funds");
        address payable user = payable(msg.sender);
        user.transfer(sharedSum);
        recipientInfo[msg.sender].withdrawn = true;
    }

    //need this fallback function to receive money
    receive() external payable {
        // receivedBalance = msg.value; // Daca fac asta, callul ajunge sa foloseasca prea mult gas
      //  emit ValueReceived(msg.value);
    }
}
